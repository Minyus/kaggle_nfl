#pytorch_model:
#  =: torch.nn.Sequential
#  _:
#
#    - =: kedex.ModuleConcat
#      _:
#
#        - {=: kedex.TensorGlobalAvgPool2d, keepdim: False}
#        - {=: kedex.TensorGlobalMaxPool2d, keepdim: False}
#        - {=: kedex.TensorGlobalMinPool2d, keepdim: False}
#        - {=: kedex.TensorGlobalRangePool2d, keepdim: False}
#
#        - =: torch.nn.Sequential
#          _:
#
##            - {=: torch.nn.Dropout, p: 0.05}
#
#            - =: kedex.ModuleConcat  # (15, 30, 60) -> (30, 30, 60)
#              _:
##                - {=: kedex.TensorSkip, _: }
#                - {=: kedex.TensorIdentity, _: }
##                - {=: kaggle_nfl.kaggle_nfl.GaussianBlur2d, kernel_size: "(15, 15)", sigma: "(5.0, 5.0)"}
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: 1, padding: 0 }
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: 3, padding: 1 }
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: 7, padding: 3 }
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: "(5, 15)", padding: "(2, 7)" }
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: "(9, 15)", padding: "(4, 7)" }
##                - {=: torch.nn.Conv2d, in_channels: 15, out_channels: 5, kernel_size: "(5, 29)", padding: "(2, 14)" }
#                - {=: kedex.ModuleBottleneck2d, in_channels: 15, out_channels: 5, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, in_channels: 15, out_channels: 5, kernel_size: [7, 7], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, in_channels: 15, out_channels: 5, kernel_size: [5, 15], activation: {=: torch.nn.CELU, alpha: 1.0}}
#            - {=: torch.nn.CELU, alpha: 1.0}
##            - {=: torch.nn.Dropout, p: 0.05}
#
#            - =: kedex.ModuleConcat  # (30, 30, 60) -> (60, 15, 30)
#              _:
#                - {=: torch.nn.AvgPool2d, stride: 2, kernel_size: 3, padding: 1}
##                - {=: torch.nn.Conv2d, in_channels: 30, out_channels: 10, kernel_size: 3, padding: 1, stride: 2 }
##                - {=: torch.nn.Conv2d, in_channels: 30, out_channels: 10, kernel_size: 7, padding: 3, stride: 2 }
##                - {=: torch.nn.Conv2d, in_channels: 30, out_channels: 10, kernel_size: "(5, 15)", padding: "(2, 7)", stride: 2 }
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [7, 7], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [5, 15], activation: {=: torch.nn.CELU, alpha: 1.0}}
#            - {=: torch.nn.CELU, alpha: 1.0}
##            - {=: torch.nn.Dropout, p: 0.05}
#
#            - =: kedex.ModuleConcat  # (60, 15, 30) -> (120, 15, 30)
#              _:
##                - {=: kedex.TensorSkip, _: }
#                - {=: kedex.TensorIdentity, _: }
##                - {=: torch.nn.Conv2d, in_channels: 60, out_channels: 60, kernel_size: 1, padding: 0 }
##                - {=: torch.nn.Conv2d, in_channels: 60, out_channels: 20, kernel_size: 3, padding: 1 }
##                - {=: torch.nn.Conv2d, in_channels: 60, out_channels: 20, kernel_size: 7, padding: 3 }
##                - {=: torch.nn.Conv2d, in_channels: 60, out_channels: 20, kernel_size: "(5, 15)", padding: "(2, 7)"  }
#                - {=: kedex.ModuleBottleneck2d, in_channels: 60, out_channels: 20, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, in_channels: 60, out_channels: 20, kernel_size: [7, 7], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, in_channels: 60, out_channels: 20, kernel_size: [5, 15], activation: {=: torch.nn.CELU, alpha: 1.0}}
#            - {=: torch.nn.CELU, alpha: 1.0}
##            - {=: torch.nn.Dropout, p: 0.05}
#
#            - =: kedex.ModuleConcat  # (120, 15, 30) -> (240, 8, 15)
#              _:
#                - {=: torch.nn.AvgPool2d, stride: 2, kernel_size: 3, padding: 1}
##                - {=: torch.nn.Conv2d, in_channels: 120, out_channels: 40, kernel_size: 3, padding: 1, stride: 2 }
##                - {=: torch.nn.Conv2d, in_channels: 120, out_channels: 40, kernel_size: 7, padding: 3, stride: 2 }
##                - {=: torch.nn.Conv2d, in_channels: 120, out_channels: 40, kernel_size: "(5, 15)", padding: "(2, 7)", stride: 2 }
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [7, 7], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [5, 15], activation: {=: torch.nn.CELU, alpha: 1.0}}
#
#            - {=: torch.nn.CELU, alpha: 1.0}
##            - {=: torch.nn.Dropout, p: 0.05}
#
#            - =: kedex.ModuleConcat  # (240, 8, 15) -> (1440,)
#              _:
#
##                - =: torch.nn.Sequential
##                  _:
##                    - {=: torch.nn.AvgPool2d, kernel_size: "(1, 15)" }  # (240, 8, 15) -> (240, 8, 1)
##                    - {=: kedex.TensorFlatten, _: }  # (240, 8, 1) -> (1920,)
#
##                - =: torch.nn.Sequential
##                  _:
##                    - {=: TensorAvgPool2d, kernel_size: [8, 15] }  # (240, 8, 15) -> (240, 1, 1)
##                    - {=: kedex.TensorFlatten, _: }  # (240, 1, 1) -> (240,)
#                - {=: kedex.TensorGlobalAvgPool2d, _: } # (240, 8, 15) -> (240,)
#
##                - =: torch.nn.Sequential
##                  _:
##                    - {=: torch.nn.MaxPool2d, kernel_size: "(8, 15)" }  # (240, 8, 15) -> (240, 1, 1)
##                    - {=: kedex.TensorFlatten, _: }  # (240, 1, 1) -> (240,)
#                - {=: kedex.TensorGlobalMaxPool2d, _: } # (240, 8, 15) -> (240,)
#
#                - =: torch.nn.Sequential
#                  _:
#
##                    - =: kedex.ModuleConcat  # (240, 8, 15) -> (120, 8, 15)
##                      modules:
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 40, kernel_size: "(1, 3)", padding: "(0, 1)" }
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 40, kernel_size: "(1, 7)", padding: "(0, 3)" }
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 40, kernel_size: "(1, 15)", padding: "(0, 7)"  }
##                    - {=: torch.nn.CELU, alpha: 1.0}
##        #            - {=: torch.nn.Dropout, p: 0.05}
#
#                    - =: kedex.ModuleConcat  # (240, 8, 15) -> (240, 4, 8)
#                      modules:
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 80, kernel_size: "(3, 3)", padding: "(1, 1)", stride: "(2, 2)" }
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 80, kernel_size: "(5, 5)", padding: "(2, 2)", stride: "(2, 2)" }
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 80, kernel_size: "(7, 7)", padding: "(3, 3)", stride: "(2, 2)" }
#                        - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 240, out_channels: 80, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                        - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 240, out_channels: 80, kernel_size: [5, 5], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                        - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 240, out_channels: 80, kernel_size: [7, 7], activation: {=: torch.nn.CELU, alpha: 1.0}}
#
#                    - {=: torch.nn.CELU, alpha: 1.0}
#        #            - {=: torch.nn.Dropout, p: 0.05}
#
#                    - =: kedex.ModuleConcat  # (240, 4, 8) -> (120, 2, 4)
#                      modules:
##                        - {=: torch.nn.Conv2d, in_channels: 240, out_channels: 120, kernel_size: "(3, 3)", padding: "(1, 1)", stride: "(2, 2)" }
#                        - {=: kedex.ModuleBottleneck2d, stride: 2, in_channels: 240, out_channels: 120, kernel_size: [3, 3], activation: {=: torch.nn.CELU, alpha: 1.0}}
#                    - {=: torch.nn.CELU, alpha: 1.0}
#        #            - {=: torch.nn.Dropout, p: 0.05}
#
#                    - {=: kedex.TensorFlatten, _: }  # (120, 2, 4) -> (960,)
#
#    - =: torch.nn.Linear
#      in_features: 1500  # 15 * 4 + 1440
#      out_features: 56  # 50 + 2 + 2 + 2
#
#    - {=: kedex.TensorUnsqueeze, dim: 1}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: kedex.TensorSqueeze, dim: 1}
#    - {=: kedex.TensorNearestPad, lower: 89, upper: 60}  # 199 = 89 + 50 + 60
#    - {=: torch.nn.Softmax, dim: 1}
#    - {=: kedex.TensorCumsum, dim: 1}


pytorch_model:
  =: torch.nn.Sequential
  _:
    - =: kedex.ModuleConcat
      _:
        - {=: kedex.TensorGlobalAvgPool2d, keepdim: False}
        - {=: kedex.TensorGlobalMaxPool2d, keepdim: False}
        - {=: kedex.TensorGlobalMinPool2d, keepdim: False}
        - {=: kedex.TensorGlobalRangePool2d, keepdim: False}
        - =: torch.nn.Sequential
          _:
            - =: kedex.ModuleConcat
              _:
                - {=: kaggle_nfl.kaggle_nfl.GaussianBlur2d, kernel_size: "(15, 15)", sigma: "(5.0, 5.0)"}
                - {=: kedex.TensorConv2d, in_channels: 15, out_channels: 5, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, in_channels: 15, out_channels: 5, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, in_channels: 15, out_channels: 5, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorAvgPool2d, stride: 2, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 60, kernel_size: [1, 1]}
                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorAvgPool2d, stride: 2, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 120, out_channels: 40, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorAvgPool2d, kernel_size: [1, 15]}
                - {=: kedex.TensorMaxPool2d, kernel_size: [1, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - {=: kedex.TensorFlatten, _: }
    - {=: torch.nn.Linear, in_features: 3900, out_features: 56}
    - {=: kedex.TensorUnsqueeze, dim: 1}
    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
    - {=: kedex.TensorSqueeze, dim: 1}
    - {=: kedex.TensorNearestPad, lower: 89, upper: 60}  # 199 = 89 + 50 + 60
    - {=: torch.nn.Softmax, dim: 1}
    - {=: kedex.TensorCumsum, dim: 1}

augmentation:
  random_horizontal_flip:
    p: 0
  random_horizontal_shift:
    p: 0
    max_shift: 0

train_batch_size: 64

train_params:
  epochs: 10  # number of epochs to train
  time_limit: 32400
  model_checkpoint_params:
    dirname: ../checkpoint
    filename_prefix: "%Y-%m-%dT%H-%M-%S"
    offset_hours: 8
    n_saved: 1
    atomic: True
    require_empty: True
    create_dir: True
    save_as_state_dict: False
  early_stopping_params:
    metric: loss
    minimize: True
    patience: 1000
  scheduler:
    =: ignite.contrib.handlers.param_scheduler.LinearCyclicalScheduler
#    =: ignite.contrib.handlers.param_scheduler.CosineAnnealingScheduler
  scheduler_params:
    param_name: lr
    start_value:
      =: operator.mul
      _:
        - 0.000_001
        - =: train_batch_size
    end_value:
      =: operator.mul
      _:
        - 0.000_01
        - =: train_batch_size
    cycle_epochs: 2  # cycle_size: int(cycle_epochs * len(train_loader))
    cycle_mult: 1.0
    start_value_mult: 1.0
    end_value_mult: 1.0
    save_history: False
  optimizer:
    =: torch.optim.Adam
#  optimizer:
#    =: torch.optim.SGD
  optimizer_params:
#    lr:  # learning rate
#      =: operator.truediv
#      _:
#        - =: train_batch_size
#        - 1000
#    momentum:
#      =: sub
#      arg:
#        - 1
#        - =: operator.truediv
#          _:
#            - =: train_batch_size
#            - 2000
    weight_decay:
      =: operator.truediv
      _:
        - 0.001
        - =: train_batch_size
  loss_fn:
    =: kaggle_nfl.kaggle_nfl.NflCrpsLossFunc
    min: -4 # -15
    max: 29 # 25
#    desc_penalty: 10.0
  evaluation_metrics:
    loss:
      =: ignite.metrics.Loss
      loss_fn:
        =: kaggle_nfl.kaggle_nfl.nfl_crps_loss
#  train_dataset_size_limit: 128
#  val_dataset_size_limit: 128
  train_data_loader_params:
    batch_size:
      =: train_batch_size
    num_workers: 1
  val_data_loader_params:
    batch_size:
     =: train_batch_size
    num_workers: 1
  evaluate_train_data: COMPLETED
  evaluate_val_data: EPOCH_COMPLETED
  progress_update: True
  seed: 0  #


RUN_CONFIG:
  tags: # None
  runner: SequentialRunner # None
  node_names: # None
  from_nodes: # None
  to_nodes: # None
  from_inputs: # None
  load_versions: # None
  pipeline_name: __default__

MLFLOW_LOGGING_CONFIG:
  offset_hours: 8
  logging_artifacts:  # None
  
PIPELINES:
  __default__:
    =: kedex.KedexPipeline
    parameters_in_inputs: True
    module: kaggle_nfl.kaggle_nfl
    decorator: kedex.log_time
    nodes:

      - inputs: train
#        func:
#          - =: kedex.df_sample
#            frac: 0.1
#            random_state: 191024
#            col_sample: PlayId
        outputs: df_020

      - inputs: df_020
        func:
          - preprocess
        outputs: df_030

      - inputs: df_030
        outputs: describe

      - inputs: df_030
        func:
          =: kedex.df_query
          expr: 'PlayerCategory == 0'
        outputs: describe_cat0

      - inputs: df_030
        func:
          =: kedex.df_query
          expr: 'PlayerCategory == 1'
        outputs: describe_cat1

      - inputs: df_030
        func:
          =: kedex.df_query
          expr: 'PlayerCategory == 2'
        outputs: describe_cat2

      - inputs: df_030
        func:
          =: kedex.df_sample
          frac: 0.5
          random_state: 191024
          col_sample: PlayId
          col_assign: Validation
        outputs: df_040

#      - inputs: df_040
#        func: fit_base_model
#        outputs: base_model
#
#      - inputs: base_model
#        func: infer
#        outputs: infered_first_iter
#
#      - inputs: df_030
#        func:
#          =: kedex.df_sample
#          frac: 0.01
#          random_state: 191024
#          col_sample: PlayId
#        outputs: df_031
#
#      - inputs: df_030
#        outputs: describe

      - inputs: parameters
        func:
          =: pass_func
          arg:
            =: pytorch_model
        outputs: initial_model

      - inputs: df_040
        func: generate_datasets
        outputs:
          - train_dataset
          - val_dataset

      - inputs:
          - initial_model
          - train_dataset
          - val_dataset
        func:
          =: kedex.neural_network_train
          train_params:
            =: train_params
          mlflow_logging: True
        outputs: pytorch_model

      - inputs: pytorch_model
        func: infer
        outputs: infered_first_iter
