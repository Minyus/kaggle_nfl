pytorch_model:
  =: torch.nn.Sequential
  _:
    - =: kedex.ModuleConcat
      _:
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, start: 18}
            - {=: kedex.TensorSqueeze, dim: 1}
            - {=: kedex.TensorSlice, end: 5}
            - {=: kedex.TensorFlatten, _: }
            - {=: torch.nn.Linear, in_features: 300, out_features: 100}
            - {=: torch.nn.CELU, alpha: 1.0}
            - {=: torch.nn.Linear, in_features: 100, out_features: 100}
            - {=: torch.nn.CELU, alpha: 1.0}
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, end: 18}
            - {=: kedex.TensorGlobalAvgPool2d, keepdim: False}
            - {=: torch.nn.Linear, in_features: 18, out_features: 15}
            - {=: torch.nn.CELU, alpha: 1.0}
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, end: 18}
            - {=: kedex.TensorGlobalMaxPool2d, keepdim: False}
            - {=: torch.nn.Linear, in_features: 18, out_features: 15}
            - {=: torch.nn.Sigmoid, _: }
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, end: 18}
            - {=: kedex.TensorGlobalMinPool2d, keepdim: False}
            - {=: torch.nn.Linear, in_features: 18, out_features: 15}
            - {=: torch.nn.Sigmoid, _: }
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, end: 18}
            - {=: kedex.TensorGlobalRangePool2d, keepdim: False}
            - {=: torch.nn.Linear, in_features: 18, out_features: 15}
            - {=: torch.nn.Sigmoid, _: }
#        - =: torch.nn.Sequential
#          _:
#            - {=: kedex.TensorSlice, start: 10}
#            - {=: kedex.TensorGlobalSumPool2d, keepdim: False}  # -> [11]
#            - {=: torch.nn.Linear, in_features: 11, out_features: 11}
#            - {=: torch.nn.CELU, alpha: 1.0}
#        - =: torch.nn.Sequential
#          _:
#            - {=: kedex.TensorSlice, end: 10}
#            - =: kedex.ModuleConcat
#              _:
#                - {=: kedex.TensorGlobalAvgPool2d, keepdim: False}  # -> [10]
#                - {=: kedex.TensorGlobalMaxPool2d, keepdim: False}  # -> [10]
#                - {=: kedex.TensorGlobalMinPool2d, keepdim: False}  # -> [10]
#                - {=: kedex.TensorGlobalRangePool2d, keepdim: False}  # -> [10]
#            - {=: torch.nn.Linear, in_features: 40, out_features: 40}
#            - {=: torch.nn.CELU, alpha: 1.0}
        - =: torch.nn.Sequential
          _:
            - {=: kedex.TensorSlice, end: 18}
            - =: kedex.ModuleConcat
              _:
                - {=: kaggle_nfl.kaggle_nfl.GaussianBlur2d, kernel_size: "(15, 15)", sigma: "(5.0, 5.0)"}
                - {=: kedex.TensorConv2d, in_channels: 18, out_channels: 4, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, in_channels: 18, out_channels: 4, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, in_channels: 18, out_channels: 4, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorAvgPool2d, stride: 2, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 30, out_channels: 10, kernel_size: [5, 15]}
            - {=: torch.nn.CELU, alpha: 1.0}
#            - =: kedex.ModuleConcat
#              _:
#                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 60, kernel_size: [1, 1]}
#                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [3, 3]}
#                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [7, 7]}
#                - {=: kedex.TensorConv2d, in_channels: 60, out_channels: 20, kernel_size: [5, 15]}
#            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - {=: kedex.TensorAvgPool2d, stride: 2, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 60, out_channels: 20, kernel_size: [3, 3]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 60, out_channels: 20, kernel_size: [7, 7]}
                - {=: kedex.TensorConv2d, stride: 2, in_channels: 60, out_channels: 20, kernel_size: [5, 15]}
              # -> [120, 8, 15]
            - {=: torch.nn.CELU, alpha: 1.0}
            - =: kedex.ModuleConcat
              _:
                - =: torch.nn.Sequential
                  _:
                    - {=: torch.nn.AvgPool2d, stride: 2, kernel_size: [3, 15]}
                    - {=: kedex.TensorConv2d, in_channels: 120, out_channels: 20, kernel_size: [1, 1]}
                    - {=: kedex.TensorFlatten, _: }
                    - {=: torch.nn.CELU, _: }
                - =: torch.nn.Sequential
                  _:
                    - {=: torch.nn.MaxPool2d, stride: 2, kernel_size: [3, 15]}
                    - {=: kedex.TensorConv2d, in_channels: 120, out_channels: 20, kernel_size: [1, 1]}
                    - {=: kedex.TensorFlatten, _: }
                    - {=: torch.nn.CELU, _: }
#                - =: torch.nn.Sequential
#                  _:
#                    - {=: kedex.TensorConv2d, in_channels: 240, out_channels: 120, kernel_size: [1, 15], padding: 0}
#                    - {=: kedex.TensorFlatten, _: }
#                    - {=: torch.nn.CELU, _: }
#                - =: torch.nn.Sequential
#                  _:
#                    - {=: torch.nn.AvgPool2d, kernel_size: [1, 15]}
#                    - {=: kedex.TensorConv2d, in_channels: 240, out_channels: 30, kernel_size: [1, 1]}
#                    - {=: kedex.TensorFlatten, _: }
#                    - {=: torch.nn.CELU, alpha: 1.0}
#                - =: torch.nn.Sequential
#                  _:
#                    - {=: torch.nn.MaxPool2d, kernel_size: [1, 15]}
#                    - {=: kedex.TensorConv2d, in_channels: 240, out_channels: 30, kernel_size: [1, 1]}
#                    - {=: kedex.TensorFlatten, _: }
#                    - {=: torch.nn.CELU, _: }
#                - =: torch.nn.Sequential
#                  _:
#                    - {=: kedex.TensorGlobalAvgPool2d, keepdim: False}
#                    - {=: torch.nn.CELU, _: }
#                - =: torch.nn.Sequential
#                  _:
#                    - {=: kedex.TensorGlobalMaxPool2d, keepdim: False}
#                    - {=: torch.nn.CELU, _: }
    - {=: torch.nn.Linear, in_features: 280, out_features: 50}
#    - {=: kedex.TensorUnsqueeze, dim: 1}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: torch.nn.AvgPool1d, kernel_size: 3, stride: 1, padding: 0}
#    - {=: kedex.TensorSqueeze, dim: 1}
    - {=: kedex.TensorNearestPad, lower: 89, upper: 60}  # 199 = 89 + 50 + 60
    - {=: torch.nn.Softmax, dim: 1}
    - {=: kedex.TensorCumsum, dim: 1}
    - {=: kedex.TensorClamp, min: 0.0, max: 1.0}

augmentation:
  random_noise_std: 1.0
  random_horizontal_flip:
    p: 0.3
  random_horizontal_shift:
    p: 0
    max_shift: 0

tta: 10

train_batch_size: 64

train_params:
  epochs: 10  # number of epochs to train
  time_limit: 32400
  model_checkpoint_params:
    dirname: ../checkpoint
    filename_prefix: "%Y-%m-%dT%H-%M-%S"
    offset_hours: 8
    n_saved: 1
    atomic: True
    require_empty: True
    create_dir: True
    save_as_state_dict: False
  early_stopping_params:
    metric: loss
    minimize: True
    patience: 1000
  scheduler:
    =: ignite.contrib.handlers.param_scheduler.LinearCyclicalScheduler
#    =: ignite.contrib.handlers.param_scheduler.CosineAnnealingScheduler
  scheduler_params:
    param_name: lr
    start_value:
      =: operator.mul
      _:
        - 0.000_001
        - =: train_batch_size
    end_value:
      =: operator.mul
      _:
        - 0.000_01
        - =: train_batch_size
    cycle_epochs: 2  # cycle_size: int(cycle_epochs * len(train_loader))
    cycle_mult: 1.0
    start_value_mult: 1.0
    end_value_mult: 1.0
    save_history: False
  optimizer:
    =: torch.optim.Adam
#  optimizer:
#    =: torch.optim.SGD
  optimizer_params:
#    lr:  # learning rate
#      =: operator.truediv
#      _:
#        - =: train_batch_size
#        - 1000
#    momentum:
#      =: sub
#      arg:
#        - 1
#        - =: operator.truediv
#          _:
#            - =: train_batch_size
#            - 2000
    weight_decay:
      =: operator.truediv
      _:
        - 0.001
        - =: train_batch_size
  loss_fn:
    =: kaggle_nfl.kaggle_nfl.NflCrpsLossFunc
    min:  # None  # -4 # -15
    max:  # None  # 29 # 25
#    desc_penalty: 10.0
  evaluation_metrics:
    loss:
      =: ignite.metrics.Loss
      loss_fn:
        =: kaggle_nfl.kaggle_nfl.nfl_crps_loss
#  train_dataset_size_limit: 128
#  val_dataset_size_limit: 128
  train_data_loader_params:
    batch_size:
      =: train_batch_size
    num_workers: 1
  val_data_loader_params:
    batch_size:
     =: train_batch_size
    num_workers: 1
  evaluate_train_data: COMPLETED
  evaluate_val_data: EPOCH_COMPLETED
  progress_update: True
  seed: 0  #


RUN_CONFIG:
  pipeline_name: __default__
  only_missing: True
  runner: SequentialRunner # None
  tags: # None
  node_names: # None
  from_nodes: # None
  to_nodes: # None
  from_inputs: # None
  load_versions: # None

MLFLOW_LOGGING_CONFIG:
  offset_hours: 8
  logging_artifacts:  # None

PIPELINES:
  __default__:
    =: kedex.KedexPipeline
    parameters_in_inputs: True
    module: kaggle_nfl.kaggle_nfl
    decorator: kedex.log_time
    nodes:

      - inputs: train
        outputs: df_020

      - inputs: df_020
        func:
          - preprocess
        outputs: df_030

#      - inputs: df_030
#        func:
#          =: kedex.df_sample
#          frac: 0.5
#          random_state: 191024
#          col_sample: PlayId
#          col_assign: Validation
#        outputs: df_040

      - inputs: df_030
        func:
          - =: kedex.df_query
            expr: "TimeHandoff < '2018-11-30T08:00:00'"
        outputs: df_031_train

      - inputs: df_030
        func:
          - =: kedex.df_query
            expr: "'2018-11-30T08:00:00' <= TimeHandoff"
        outputs: df_031_val

      - inputs:
          - df_031_train
          - df_031_val
        func:
          =: kedex.df_concat
          new_col_name: Validation
          new_col_values: [0, 1]
        outputs: df_040

      - inputs: df_040
        func: generate_datasets
        outputs:
          - train_dataset
          - val_dataset

      - inputs: parameters
        func:
          =: pass_func
          arg:
            =: pytorch_model
        outputs: initial_model

      - inputs:
          - initial_model
          - train_dataset
          - val_dataset
        func:
          =: kedex.neural_network_train
          train_params:
            =: train_params
          mlflow_logging: True
        outputs: pytorch_model

#      - inputs: pytorch_model
#        func: infer
#        outputs: infered_first_iter

      - inputs:
          - val_dataset
          - pytorch_model
          - parameters
        func: final_validation
        outputs: loss_df

      - inputs: df_020
        outputs: describe

      - inputs: df_020
        func:
          =: kedex.df_query
          expr: 'Season == 2017'
        outputs: describe_s2017

      - inputs: df_020
        func:
          =: kedex.df_query
          expr: 'Season == 2018'
        outputs: describe_s2018

      - inputs: df_030
        func:
          =: kedex.df_query
          expr: 'Season == 2017'
        outputs: describe_prep_s2017

      - inputs: df_030
        func:
          =: kedex.df_query
          expr: 'Season == 2018'
        outputs: describe_prep_s2018

      - inputs: df_030
        func:
          - =: kedex.df_filter
            items:
              [
                "GameId",
                "PlayId",
                "Season",
                "YardLine",
                "TimeHandoff",
                "Yards",
                "YardsToGoalCode",
                "DownCode",
                "ScoreDiffCode",
                "HomeOnOffenseCode",
                "OffenceTeamCode",
                "DefenceTeamCode",
              ]
          - =: kedex.df_drop_duplicates
            _:
        outputs: play_df

#      - inputs: play_df
#        func:
#          =: kedex.df_drop
#          columns: TimeHandoff
#        outputs: pairplot
