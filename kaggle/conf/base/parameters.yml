#pytorch_model:
#  obj: kedex.contrib.ops.pytorch_ops.PytorchSequential
#  modules:
#
#    - obj: torchvision.models.resnet._resnet
#      arch: resnet9
#      block:
#        obj: torchvision.models.resnet.BasicBlock
#      layers: [1, 1, 1, 1]
#      pretrained: False
#      progress:  # None
#      num_classes: 199
#
#    - obj: torch.nn.Dropout
#      p: 0.5
#
#    - obj: torch.nn.Linear
#      in_features: 199
#      out_features: 205  # 199 + 2 + 2 + 2
#
#    - obj: kedex.contrib.ops.pytorch_ops.PytorchUnsqueeze
#      dim: 1
#
#    - obj: torch.nn.AvgPool1d
#      kernel_size: 3
#      stride: 1
#      padding: 0
#
#    - obj: torch.nn.AvgPool1d
#      kernel_size: 3
#      stride: 1
#      padding: 0
#
#    - obj: torch.nn.AvgPool1d
#      kernel_size: 3
#      stride: 1
#      padding: 0
#
#    - obj: kedex.contrib.ops.pytorch_ops.PytorchSqueeze
#      dim: 1
#
#    - obj: torch.nn.Sigmoid
#      _:  # dummy


pytorch_model:
  obj: kedex.contrib.ops.pytorch_ops.PytorchSequential
  modules:
    - obj: torch.nn.Conv2d  # (3, 30, 60) -> (8, 28, 46)
      in_channels: 3
      out_channels: 8
      kernel_size:
        obj: tuple
        arg:
          - 3
          - 15

    - obj: torch.nn.ReLU
      _:  # dummy

    - obj: torch.nn.Conv2d  # (8, 28, 46) -> (16, 26, 32)
      in_channels: 8
      out_channels: 16
      kernel_size:
        obj: tuple
        arg:
          - 3
          - 15

    - obj: torch.nn.ReLU
      _:  # dummy


    - obj: torch.nn.Conv2d  # (16, 26, 32) -> (24, 24, 18)
      in_channels: 16
      out_channels: 24
      kernel_size:
        obj: tuple
        arg:
          - 3
          - 15

    - obj: torch.nn.ReLU
      _:  # dummy

    - obj: torch.nn.Conv2d  # (24, 24, 18) -> (32, 22, 4)
      in_channels: 24
      out_channels: 32
      kernel_size:
        obj: tuple
        arg:
          - 3
          - 15

    - obj: torch.nn.ReLU
      _:  # dummy

    - obj: torch.nn.Conv2d  # (34, 22, 4) -> (40, 20, 1)
      in_channels: 32
      out_channels: 40
      kernel_size:
        obj: tuple
        arg:
          - 3
          - 4

    - obj: torch.nn.ReLU
      _:  # dummy

    - obj: kedex.contrib.ops.pytorch_ops.PytorchFlatten
      _:  # dummy

    - obj: torch.nn.Linear
      in_features: 800
      out_features: 205  # 199 + 2 + 2 + 2

    - obj: kedex.contrib.ops.pytorch_ops.PytorchUnsqueeze
      dim: 1

    - obj: torch.nn.AvgPool1d
      kernel_size: 3
      stride: 1
      padding: 0

    - obj: torch.nn.AvgPool1d
      kernel_size: 3
      stride: 1
      padding: 0

    - obj: torch.nn.AvgPool1d
      kernel_size: 3
      stride: 1
      padding: 0

    - obj: kedex.contrib.ops.pytorch_ops.PytorchSqueeze
      dim: 1

    - obj: torch.nn.Sigmoid
      _:  # dummy


train_batch_size: 256

train_params:
  epochs: 1000  # number of epochs to train
  time_limit: 32400
  early_stopping_params:
    metric: loss
    minimize: True
    patience: 1000
  scheduler:
    obj: ignite.contrib.handlers.param_scheduler.LinearCyclicalScheduler
#    obj: ignite.contrib.handlers.param_scheduler.CosineAnnealingScheduler
  scheduler_params:
    param_name: lr
    start_value:
      obj: mul
      arg:
        - obj: train_batch_size
        - 0.000_000_1
    end_value:
      obj: mul
      arg:
        - obj: train_batch_size
        - 0.000_002
    cycle_epochs: 2  # cycle_size: int(cycle_epochs * len(train_loader))
    cycle_mult: 1.0
    start_value_mult: 1.0
    end_value_mult: 1.0
    save_history: False
  optimizer:
    obj: torch.optim.Adam
#  optimizer:
#    obj: torch.optim.SGD
  optimizer_params:
#    lr:  # learning rate
#      obj: truediv
#      arg:
#        - obj: train_batch_size
#        - 1000
#    momentum:
#      obj: sub
#      arg:
#        - 1
#        - obj: truediv
#          arg:
#            - obj: train_batch_size
#            - 2000
    weight_decay:
      obj: truediv
      arg:
        - 0.01
        - obj: train_batch_size
  loss_fn:
    obj: kaggle_nfl.kaggle_nfl.NflCrpsLossFunc
    min: -15
    max: 25
  metrics:
    loss:
      obj: ignite.metrics.Loss
      loss_fn:
        obj: kaggle_nfl.kaggle_nfl.nfl_crps_loss
  train_data_loader_params:
    batch_size:  # input batch size for training
      obj: train_batch_size
    num_workers: 4
  val_data_loader_params:
    batch_size: 100  # input batch size for validation
    num_workers: 4
  evaluate_train_data: COMPLETED
  evaluate_val_data: EPOCH_COMPLETED
  progress_update: True
  seed: 0  #


RUN_CONFIG:
  tags: # None
  runner: SequentialRunner # None
  node_names: # None
  from_nodes: # None
  to_nodes: # None
  from_inputs: # None
  load_versions: # None
  pipeline_name: __default__

MLFLOW_LOGGING_CONFIG:
  offset_hours: 8
  logging_artifacts:  # None
  
PIPELINES:
  __default__:
    obj: kedex.pipeline.KedexPipeline
    parameters_in_inputs: True
    module: kaggle_nfl.kaggle_nfl
    decorator: kedex.contrib.decorators.log_time
    nodes:

      - inputs: train
#        func:
#          - obj: kedex.df_sample
#            frac: 0.02
#            random_state: 191024
#            col_sample: PlayId
        outputs: df_020

      - inputs: df_020
        func:
          - preprocess
        outputs: df_030

      - inputs: df_030
        func:
          obj: kedex.df_sample
          frac: 0.1
          random_state: 191024
          col_sample: PlayId
          col_assign: Validation
        outputs: df_040

#      - inputs: df_040
#        func: fit_base_model
#        outputs: base_model
#
#      - inputs: base_model
#        func: infer
#        outputs: infered_first_iter
#
#      - inputs: df_030
#        func:
#          obj: kedex.df_sample
#          frac: 0.01
#          random_state: 191024
#          col_sample: PlayId
#        outputs: df_031
#
#      - inputs: df_030
#        outputs: describe

      - inputs: parameters
        func:
          obj: pass_func
          arg:
            obj: pytorch_model
        outputs: initial_model

      - inputs: df_040
        func: generate_datasets
        outputs:
          - train_dataset
          - val_dataset

      - inputs:
          - initial_model
          - train_dataset
          - val_dataset
        func:
          obj: kedex.contrib.ops.pytorch_ops.pytorch_train
          train_params:
            obj: train_params
        outputs: pytorch_model

      - inputs: pytorch_model
        func: infer
        outputs: infered_first_iter
